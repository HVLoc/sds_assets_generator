import 'package:assets_generator/assets_generator.dart';
import 'package:build_runner_core/build_runner_core.dart';

const String license = '''// GENERATED CODE - DO NOT MODIFY MANUALLY
// **************************************************************************
// Auto generated by https://github.com/fluttercandies/assets_generator
// **************************************************************************
''';

String get classDeclare => 'class {0} {\n const {0}._();';
String get classDeclareFooter => '}\n';
String get constsArray => '''
final List<String> {0} = <String>[
{1}
];
''';

class Template {
  Template(
    this.assets,
    this.packageGraph,
    this.rule,
    this.class1,
    this.constIgnore,
    this.constArray,
  );
  final PackageNode packageGraph;
  final List<String> assets;
  final Rule rule;
  final Class class1;
  final RegExp constIgnore;
  final bool constArray;
  @override
  String toString() {
    final StringBuffer sb = StringBuffer();
    sb.write(license);

    final StringBuffer arraySb = StringBuffer();

    final String className = class1.go('ucc');

    sb.write(classDeclare.replaceAll(
      '{0}',
      className,
    ));
    if (!packageGraph.isRoot) {
      sb.write('''\nstatic const String package = '${packageGraph.name}';\n''');
    }

    for (final String asset in assets) {
      if (constIgnore != null && constIgnore.hasMatch(asset)) {
        continue;
      }
      sb.write(formatFiled(asset));
      if (constArray) {
        arraySb.write(className + '.' + _formatFiledName(asset) + ',');
      }
    }

    sb.write(classDeclareFooter);

    if (arraySb.isNotEmpty) {
      sb.write(constsArray
          .replaceAll(
            '{0}',
            class1.go('lcc') + 'Array',
          )
          .replaceAll('{1}', arraySb.toString()));
    }

    return sb.toString();
  }

  String formatFiled(String path) {
    return '''\nstatic const String ${_formatFiledName(path)} = '$path';\n''';
  }

  String _formatFiledName(String path) {
    path = path
        .replaceAll('/', '_')
        .replaceAll('.', '_')
        .replaceAll(' ', '_')
        .replaceAll('-', '_')
        .replaceAll('@', '_AT_');
    return rule.go(path);
  }
}
